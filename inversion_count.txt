#include <iostream>
#include <vector>
using namespace std;

// Merge function used in merge sort
long long merge(vector<int>& arr, vector<int>& temp, int left, int mid, int right) {
    long long inv_count = 0;
    int i = left;     // Starting index of left subarray
    int j = mid + 1;  // Starting index of right subarray
    int k = left;     // Starting index of merged array

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count += (mid - i + 1); // Count inversions
        }
    }

    // Copy the remaining elements
    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];

    // Copy back to original array
    for (int i = left; i <= right; i++)
        arr[i] = temp[i];

    return inv_count;
}

// Merge sort function
long long mergeSort(vector<int>& arr, vector<int>& temp, int left, int right) {
    long long inv_count = 0;
    if (left < right) {
        int mid = (left + right) / 2;

        inv_count += mergeSort(arr, temp, left, mid);
        inv_count += mergeSort(arr, temp, mid + 1, right);

        inv_count += merge(arr, temp, left, mid, right);
    }
    return inv_count;
}

// Function to count inversions
long long countInversions(vector<int>& arr) {
    vector<int> temp(arr.size());
    return mergeSort(arr, temp, 0, arr.size() - 1);
}

// Main driver code
int main() {
    vector<int> arr = {2, 4, 1, 3, 5};
    cout << "Number of inversions: " << countInversions(arr) << endl;
    return 0;
}
