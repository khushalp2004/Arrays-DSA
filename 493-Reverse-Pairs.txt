int ans = 0;
    int merge(vector<int>& nums, int left, int mid, int right) {
        int leftSize = mid - left + 1;
        int rightSize = right - mid;

        vector<int> leftPart(leftSize), rightPart(rightSize);

        for (int i = 0; i < leftSize; i++)
            leftPart[i] = nums[left + i];
        for (int i = 0; i < rightSize; i++)
            rightPart[i] = nums[mid + 1 + i];

        int i = 0, j = 0;
        int count = 0;

        // Count reverse pairs
        for (i = 0; i < leftSize; i++) {
            while (j < rightSize && (long)leftPart[i] > 2LL * rightPart[j])
                j++;
            count += j;
        }
        ans += count;

        // Merge step (same as merge sort)
        i = 0;
        j = 0;
        int k = left;
        while (i < leftSize && j < rightSize) {
            if (leftPart[i] <= rightPart[j])
                nums[k++] = leftPart[i++];
            else
                nums[k++] = rightPart[j++];
        }

        while (i < leftSize)
            nums[k++] = leftPart[i++];
        while (j < rightSize)
            nums[k++] = rightPart[j++];

        return ans;
    }

    void mergeSort(vector<int>& nums, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            mergeSort(nums, left, mid);
            mergeSort(nums, mid + 1, right);

            merge(nums, left, mid, right);
        }
    }
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        mergeSort(nums, 0, n - 1);
        return ans;
    }